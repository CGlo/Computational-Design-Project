//PSEUDOCODE YO

 private void RunScript(Mesh body, Mesh wall, int slider, Point3d sun, int res, ref object A, ref object B, ref object C, ref object D, ref object E, ref object F)
  {
    int i;
    int j;

    //Create list for intersection points
    List<Point3d> lpt = new List<Point3d>();
    //Create list for sifted wallpoints
    List<Point3d> wallpointsift = new List<Point3d>();

    //Create "Sun" vector (sun point to middle of wall)
    Point3d wallmidpt = (wall.Vertices[wall.Faces[(wall.Faces.Count / 2) + 20].B]);
    Vector3d sunray = new Vector3d(sun - wallmidpt);

    //Create list for sunray intersection lines
    List<Line> lsunray = new List<Line>();

    //Loop for sunray intersection test
    for (i = 0; i < wall.Faces.Count; ++i){
      //Make variable for ALL wallpoints on wall (first vertex of each wall face)
      Point3d wallpoint = wall.Vertices[wall.Faces[i].A];
      //Line from all wallpoints, in "sunray" vector direction (angled towards sun point)
      Line ln = new Line(wallpoint, sunray);
      
      /*---------------------- PSEUDOCODE ---------------------------------
      Create mesh pipes around lines
      Union pipe and body meshes together
      Run smoothing operation on the mesh
      */
      
      //Declare faceid (array) to store faces with intersections
      int[] faceid;
      //Evaluate intersection points ("xp") between lines from wall and human mesh
      Point3d[] xp = Rhino.Geometry.Intersect.Intersection.MeshLine(body, ln, out faceid);

      //delete faces that have an intersect
      body.Faces.DeleteFaces(faceid);
      
      /*---------------------- PSEUDOCODE ---------------------------------
      If faceid is greater than 1/3 of the body faces
        Don't delete faces (line 39)
        ---OR---
      Inside above int[] faceid, limit size of array to be 1/3 total number of faces
      
      For remaining faces, repeat to keep another 1/3
        Translate and rotate new third dude guy
        Do same thing with pipes and sun and stuff
      For remaining faces, repeat to keep another 1/3
        Translate and rotate new third dude guy
        Do same thing with pipes and sun and stuff      
      */

      //Sift for intersected points and lines
      if (xp.Length == 2){    //if the lines go through the mesh twice
        //lsunray.Add(ln);
        //adding only the points on the wall that intersect with the mesh to the list
        wallpointsift.Add(wallpoint);

        //variables to store parameter (double) on lines from wall that's closest to intersection point
        double int1 = ln.ClosestParameter(xp[0]);
        double int2 = ln.ClosestParameter(xp[1]);
        //evaluate which of the 2 intersection points to keep based on which is closest to wall
        if (int1 > int2){
          lpt.Add(xp[1]);
        }
        else if (int1 < int2){
          lpt.Add(xp[0]);
        }

      }
    }

    //Create short lines (wall -> closest point on mesh only); add to lsunray list to output
    for (j = 0; j < lpt.Count; ++j){
      Line shortline = new Line(wallpointsift[j], lpt[j]);
      lsunray.Add(shortline);
    }




    //Assign to A
    A = lsunray;  //outputs 13659 lines (should be 165) (*82.781)
    B = lpt;
    //debug
    C = lpt.Count;    //verified to be 165
    D = wallpointsift.Count;    //verified to be 165
    E = wall.Faces.Count;    //1600
    F = body;
  }
